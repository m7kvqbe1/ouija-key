/* Ouija Key, built Fri Jun 05 2015 13:15:36 */var Sampler = function(assetRoot) {	
	var _assetRoot = '';
	
	var _assetCount = 104;	
	var _assetsLoaded = 0;
	
	var _preloadComplete = false;
	
	var _backgroundVideoElement = document.getElementById('#video-bg');
	var _backgroundVideoOverlayElement = document.getElementById('#video-overlay');
	
	var sounds = {
		q: "S01.wav",
		w: "S02.wav",
		e: "S03.wav",
		r: "S04.wav",
		t: "S05.wav",
		y: "S06.wav",
		u: "S07.wav",
		i: "S08.wav",
		o: "S09.wav",
		p: "S10.wav",
		a: "S11.wav",
		s: "S12.wav",
		d: "S13.wav",
		f: "S14.wav",
		g: "S15.wav",
		h: "S16.wav",
		j: "S17.wav",
		k: "S18.wav",
		l: "S19.wav",
		z: "S20.wav",
		x: "S21.wav",
		c: "S22.wav",
		v: "S23.wav",
		b: "S24.wav",
		n: "S25.wav",
		m: "S26.wav",
		Q: "S27.wav",
		W: "S28.wav",
		E: "S29.wav",
		R: "S30.wav",
		T: "S31.wav",
		Y: "S32.wav",
		U: "S33.wav",
		I: "S34.wav",
		O: "S35.wav",
		P: "S36.wav",
		A: "S37.wav",
		S: "S38.wav",
		D: "S39.wav",
		F: "S40.wav",
		G: "S41.wav",
		H: "S42.wav",
		J: "S43.wav",
		K: "S44.wav",
		L: "S45.wav",
		Z: "S46.wav",
		X: "S47.wav",
		C: "S48.wav",
		V: "S49.wav",
		B: "S50.wav",
		N: "S51.wav",
		M: "S52.wav"
	};
	
	var videos = {
		q: "1.webm",
		w: "2.webm",
		e: "3.webm",
		r: "4.webm",
		t: "5.webm",
		y: "6.webm",
		u: "7.webm",
		i: "8.webm",
		o: "9.webm",
		p: "10.webm",
		a: "11.webm",
		s: "12.webm",
		d: "13.webm",
		f: "14.webm",
		g: "15.webm",
		h: "16.webm",
		j: "17.webm",
		k: "18.webm",
		l: "19.webm",
		z: "20.webm",
		x: "21.webm",
		c: "22.webm",
		v: "23.webm",
		b: "24.webm",
		n: "25.webm",
		m: "26.webm",
		Q: "27.webm",
		W: "28.webm",
		E: "29.webm",
		R: "30.webm",
		T: "31.webm",
		Y: "32.webm",
		U: "33.webm",
		I: "34.webm",
		O: "35.webm",
		P: "36.webm",
		A: "37.webm",
		S: "38.webm",
		D: "39.webm",
		F: "40.webm",
		G: "41.webm",
		H: "42.webm",
		J: "43.webm",
		K: "44.webm",
		L: "45.webm",
		Z: "46.webm",
		X: "47.webm",
		C: "48.webm",
		V: "49.webm",
		B: "50.webm",
		N: "51.webm",
		M: "52.webm"
	};

	var _loadCheck = function(uri) {
		_assetsLoaded++;
		
		app.userInterface.printDebug('Loading: ' + uri);
		
		if(_assetsLoaded === _assetCount) {
			_preloadComplete = true;
			
			$('.loading, #debug').addClass('hidden');
			$('#nav-toggle').addClass('show');
			
			if(!app.userInterface.mobile) app.userInterface.toggleMenuDisplay();
		}
	}
	
	var _preloadAudio = function(uri) {
		var audio = new Audio();
		
		$(audio).on('canplaythrough', function() {
			_loadCheck(uri);
		}, false);
		
		audio.src = uri;
		
		return audio;
	}
	
	var _preloadVideo = function(uri) {
		var source = document.createElement('source');
		source.src = uri;    
		source.type = 'video/webm';
		
		var video = document.createElement('video');
		video.appendChild(source);
		
		$(video).attr('id', 'video-overlay');
		
		$(video).on('canplaythrough', function() {
			_loadCheck(uri);
		}, false);
		
		return video;
	}
	
	var playAudio = function(key) {
		if(!_preloadComplete) return;
				
		// Create new audio element (allows for MPC note-repeat emulation)
		var audioElement = document.createElement('audio');
		$(audioElement).attr('autoplay', 'autoplay');
		$(audioElement).attr('src', sounds[key].src);
	};
	
	var playVideo = function(key) {			
		if(!_preloadComplete) return;
		
		// Add preloaded video element to DOM (autoplay and loop)
		$('#video-wrapper').html(videos[key].outerHTML);
		$('#video-wrapper video').attr('autoplay', 'autoplay');
		$('#video-wrapper video').attr('loop', 'loop');
	};
	
	var pauseVideo = function() {
		_backgroundVideoOverlayElement.pause();
	};
	
	var init = (function() {
		if(app.userInterface.mobile) return;
		
		if(typeof assetRoot !== 'undefined') {
			_assetRoot = assetRoot;
		} else {
			console.warn('Audio and video asset source undefined');
			return;
		}
		
		// Preload audio assets
		for(var property in sounds) {			
			var fileName = sounds[property];
			sounds[property] = _preloadAudio(_assetRoot + '/audio/' + fileName);
		}
		
		// Preload video assets
		for(var property in videos) {
			var fileName = videos[property];
			videos[property] = _preloadVideo(_assetRoot + '/video/' + fileName);
		}
		
		// Bind keypress event listener
		$(document).on('keypress', function(e) {
			var key = String.fromCharCode(e.which);
			
			if(app.userInterface.promptActive || !videos.hasOwnProperty(key)) return;
			
			app.webSocket.broadcast('trigger', { key: key });
					
			// Using setTimeout to prevent overloading 
			// of the call stack and crashing the app
			setTimeout(playAudio(key), 50);
			setTimeout(playVideo(key), 50);
		});
	})();
	
	// Return public methods and properties
	return {
		pauseVideo: pauseVideo,
		playVideo: playVideo,
		playAudio: playAudio,
		videos: videos,
		sounds: sounds
	};
};
var UserInterface = function() {
	var mobile = false;
	
	var chatEnabled = true;
	
	var menuActive = false;

	var promptActive = false;
	
	var toggleMenuDisplay = function() {
		if(promptActive) {
			closePrompt();
		}
		
		$('#nav-toggle').toggleClass('active');
		$('.menu').toggleClass('hidden');
				
		menuActive = (menuActive) ? false : true;
	};
	
	var toggleMenuItem = function(selector) {
		$(selector).toggleClass('disabled');
	};
	
	var toggleChat = function() {
		$('.chat-messages').toggleClass('hidden');
		$('#menu-toggle-chat').toggleClass('disabled');
		
		var text = (chatEnabled) ? 'Disabled' : 'Enabled';
		$('.chat-toggle-text').text(text);
		
		chatEnabled = (chatEnabled) ? false : true;
	};
	
	var clearChat = function() {
		$('.chat-messages').html('');
	};
	
	var hideChatMessage = function() {
		$('.chat-messages :last-child').remove();
	};
	
	var printChatMessage = function(message) {		
		if(typeof message !== 'undefined' && message !== '') {			
			$('.chat-messages').prepend('<span class="message">' + message + '</span>');
			
			if($('.chat-messages span').length > 5) {
				hideChatMessage();
			}
		}
	};
	
	var showRoomId = function(roomid, err) {
		if(err) {
			$('#room-id').html('Room ID Invalid');
			
			setTimeout(function() {
				if(app.webSocket.room) {
					$('#room-id').html('<strong>Current Room ID:</strong><br /><span>' + app.webSocket.room + '</span>');
				} else {
					$('#room-id').html('');
				}
			}, 4000);
		} else {
			$('#room-id').html('<strong>Current Room ID:</strong><br /><span>' + roomid + '</span>');
		}
		
		$('#room-id').removeClass('hidden');
	};
	
	var hideRoomId = function() {
		$('#room-id').addClass('hidden');
	};
	
	var printDebug = function(message) {
		$('#debug').text(message);
		$('#debug').removeClass('hidden');
		
	};
	
	var openPrompt = function(message, type) {
		$('#prompt input').attr('placeholder', message);
		$('#prompt input').val('');
		$('.version, .shortcuts').addClass('hidden');
		$('#prompt').removeClass('hidden');
		$('#prompt').attr('data-type', type);
		document.querySelector('#prompt input').focus();
		
		promptActive = true;
	};
	
	var closePrompt = function() {
		$('#prompt').addClass('hidden');
		$('.version, .shortcuts').removeClass('hidden');
		
		promptActive = false;
	};
	
	var promptAction = function() {
		var type = $('#prompt').attr('data-type');
		
		switch(type) {
			case 'chat':
				var message = $('#prompt input').val();
				
				app.webSocket.broadcast('chat', { message: message });
				
				printChatMessage(message);
				break;
			
			case 'join':
				var uuid = $('#prompt input').val();
				
				if(!/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/i.test(uuid)) {
					showRoomId(null, true);
					return;	
				}
				
				if(app.webSocket.room) app.webSocket.leaveRoom();
				
				app.webSocket.joinRoom(uuid);
				break;
				
			default:
				break;
		}
		
		closePrompt();
	};
	
	var browserCheck = function() {
		if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
			mobile = true;
			$('video, .chat-messages').addClass('hidden');
			$('.loading .inner').html('<span>Sorry, Ouija Key is intended to be used with a keyboard. Please come back soon using a laptop or desktop computer.</span>');
		}		
	};

	var init = (function() {		
		browserCheck();
		
		// Bind open / close menu button event listener
		$('#nav-toggle').on('click', function() {
			toggleMenuDisplay();
		});
		
		// Bind keyboard shortcuts event listener
		$(document).on('keyup', function(e) {
			switch(e.keyCode) {
				// Return key
				case 13:
					if(promptActive) {
						promptAction();
					} else if(!menuActive && chatEnabled) {
						openPrompt('Enter your message', 'chat');
					}
					return;
				
				// Escape key
				case 27:				
					if(promptActive) {
						closePrompt()
					} else {
						toggleMenuDisplay();
					}
					return;
				
				default:
					return;
			}
		});
		
		// Bind toggle chat event listener
		$('#menu-toggle-chat').on('click', function() {
			toggleChat();
		});
		
		// Bind create new room event listener
		$('#menu-new').on('click', function() {
			app.webSocket.generateRoom();
		});
		
		// Bind leave current room event listener
		$('#menu-leave').on('click', function() {
			app.webSocket.leaveRoom();
		});
		
		// Join room click event listener
		$('#menu-join').on('click', function() {
			// Open dialogue box to enter room GUID
			openPrompt('Enter room ID', 'join');
		});
		
		// Close prompt
		$('#prompt .icon-close').on('click', function() {
			closePrompt();
		});
		
		// Clean out a message from the chat window every 40 seconds
		(function cleanChat() {
			setTimeout(function() {
				hideChatMessage();
				cleanChat();
			}, 40000);	
		})();
	})();
	
	// Return public methods and properties
	return {
		mobile: mobile,
		chatEnabled: chatEnabled,
		menuActive: menuActive,
		promptActive: promptActive,
		toggleMenuDisplay: toggleMenuDisplay,
		toggleMenuItem: toggleMenuItem,
		toggleChat: toggleChat,
		clearChat: clearChat,
		hideChatMessage: hideChatMessage,
		printChatMessage: printChatMessage,
		showRoomId: showRoomId,
		hideRoomId: hideRoomId,
		printDebug: printDebug,
		openPrompt: openPrompt,
		closePrompt: closePrompt,
		promptAction: promptAction,
		browserCheck: browserCheck
	};
};
var WebSocket = function(uri) {
	var _host = '';
	
	var _socket = null;
	
	var room = null;
	
	var _generateUuid = function() {
		function s4() {
			return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
		}
	  
		return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	};
	
	var joinRoom = function(roomId) {
		if(typeof roomId === 'undefined') {
			console.warn('Please specify a room to join');
			return;
		}
		
		room = roomId;
		_socket.emit('join', room);
		
		if($('#menu-leave').hasClass('disabled')) {
			app.userInterface.toggleMenuItem('#menu-leave');
		}
		
		app.userInterface.showRoomId(room);
	};
	
	var leaveRoom = function() {
		_socket.emit('leave', room);
		room = null;
		
		if(!$('#menu-leave').hasClass('disabled')) {
			app.userInterface.toggleMenuItem('#menu-leave');
		}
		
		app.userInterface.hideRoomId();
	};
	
	var generateRoom = function() {
		// Leave current room
		if(room) leaveRoom();
		
		// Generate hash for room ID and join room
		room = _generateUuid();
		joinRoom(room);
		
		return room;
	};

	var broadcast = function(eventType, payload) {
		if(room) {
			payload.room = room;	
		}
		
		payload = JSON.stringify(payload);
		
		_socket.emit(eventType, payload);
	};
	
	var init = (function() {
		if(typeof uri === 'undefined') {
			console.warn('No URI provided for server');
			return;
		}
		
		_host = uri;
		
		// Create socket
		_socket = io.connect(_host);
		
		// Trigger samples from socket event
		_socket.on('trigger', function(data) {
			var obj = JSON.parse(data);
			
			// Using setTimeout to prevent overloading
			// of the call stack and crashing the app
			setTimeout(app.sampler.playAudio(obj.key), 50);
			setTimeout(app.sampler.playVideo(obj.key), 50);
		});
		
		// Display chat message from socket event
		_socket.on('chat', function(data) {
			var obj = JSON.parse(data);
						
			app.userInterface.printChatMessage(obj.message);
		});
	})();
	
	// Return public methods and properties
	return {
		room: room,
		joinRoom: joinRoom,
		leaveRoom: leaveRoom,
		generateRoom: generateRoom,
		broadcast: broadcast	
	};
};
var app = app || {};

$(document).ready(function() {
	app.userInterface = new UserInterface();
	
	app.webSocket = new WebSocket('http://tomhumphris.com:8080');
	
	app.sampler = new Sampler('/public');
});